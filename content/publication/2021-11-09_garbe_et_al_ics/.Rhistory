# Chunk 1: setup
# Housekeeping
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(fig.align='center')
options(knitr.kable.NA = '')
# required R packages
packages <- c('gridExtra', 'tidyverse', "RColorBrewer", "Hmisc", "haven", "rstatix", "ggpubr", "kableExtra", "lubridate", "scales", "lme4", "sjPlot", "sjmisc", "sjlabelled", "afex", "car", "betareg", "effects", "ggeffects", "ggExtra", "viridis")
lapply(packages, require, character.only = TRUE)
set.seed(0815)
# set ggplot theme
theme_set(theme_classic() +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "none",
text = element_text(colour = "black"),
axis.text.x = element_text(colour = "black"),
axis.text.y = element_text(colour="black"),
strip.background =element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()))
# Chunk 2
dat_raw <- read_sav("data/2021_07_02_COMPASS_W0-W12_linewise_essential.sav") %>%
filter(Welle > 8 & Welle < 12) %>%  # remove irrelevant data collection waves
select_if(function(x) !all(is.na(x)))  # remove variables containing only NA
# which variables contain *only* NA?
# na_cols <- dat_raw %>% select_if(function(x) all(is.na(x))) %>% colnames()
# dat_raw  <- dat_raw %>% select(!all_of(na_cols))
# convert variables to factors
dat_raw$lfdn <- haven::as_factor(dat_raw$lfdn)
dat_raw$Welle <- haven::as_factor(dat_raw$Welle)
dat_raw$Schnelltestmodul <- haven::as_factor(dat_raw$Schnelltestmodul)
# condition
dat_raw <- dat_raw %>% mutate(condition = Schnelltestmodul)
# relevel data collection waves and change labels for plotting
dat_raw$Welle <- droplevels(dat_raw$Welle)
dat_raw$Welle <- dplyr::recode(dat_raw$Welle,
"Welle 9 (11.02.2021 bis 17.03.2021)" = "Welle 9\n(11.02.- 17.03.2021)",
"Welle 10 (18.03.2021 bis 21.04.2021)" = "Welle 10\n(18.03.- 21.04.2021)",
"Welle 11 (22.04.2021 bis 26.05.2021)" = "Welle 11\n(22.04.-26.05.2021)")
# S1_Age
dat_raw     <- dat_raw %>% rename(age = S1_Alter)
# S2: Gender
dat_raw$gender <- haven::as_factor(dat_raw$S2)
dat_raw$gender <- dplyr::recode(dat_raw$gender,
"MÃ¤nnlich" = "male",
"Weiblich" = "female",
"divers" = "non-binary")
#set reference level
dat_raw$gender <- relevel(dat_raw$gender, ref = "male")
# Education
dat_raw$education <- haven::as_factor(dat_raw$S5)
levels(dat_raw$education) <- c("Noch in Schulausbildung", "Von der Schule abgegangen ohne Schulabschluss", "Haupt- oder Volksschul-Abschluss", "Mittlere Reife oder Abschluss der polytechnischen Oberschule POS","Abitur, Fachhochschulreife (Gymnasien oder erweiterte Oberschule EOS)")
#set reference level
dat_raw$education <- relevel(dat_raw$education, ref = "Noch in Schulausbildung")
# Schnelltestwissen: recode as correct vs incorrect (see below for more fine-grained analyses)
# answer options (multiple answers allowed): F89_1, F89_2, F89_3, F89_4, F89_5, F89_99
# glimpse(dat_raw$F89_1)
# correct = *only" F89_1 has been selected, otherwise false
dat_raw <- dat_raw %>%
mutate(F89_schnelltest_wissen = factor(if_else(F89_1 == 1 & (F89_2 == 0 & F89_3 == 0 & F89_4 == 0 & F89_5 == 0 & F89_99 == 0), "correct", "false")))
#set reference level
dat_raw$F89_schnelltest_wissen <- relevel(dat_raw$F89_schnelltest_wissen, ref = "correct")
# Rename variables --------------------------------------------------------
# risk perception
dat_raw <- dat_raw %>% rename(risk_perception_pre = F3)
dat_raw <- dat_raw %>% rename(risk_perception_post = F3w)
dat_raw$risk_perception_diff <-  dat_raw$risk_perception_pre - dat_raw$risk_perception_post # pre-post difference in risk perception
# intention to test: pre and post
dat_raw <- dat_raw %>% rename(intention_rapidtest_home_pre = F891_1)
dat_raw <- dat_raw %>% rename(intention_rapidtest_pointofcare_pre = F891_2)
dat_raw <- dat_raw %>% rename(intention_PCR_pre = F891_3)
dat_raw <- dat_raw %>% rename(intention_rapidtest_home_post = F891w_1)
dat_raw <- dat_raw %>% rename(intention_rapidtest_pointofcare_post = F891w_2)
dat_raw <- dat_raw %>% rename(intention_PCR_post = F891w_3)
# split sample: survey data and experimental data -------------------------
# sample who did not participate in intervention
dat_survey <- dat_raw %>% filter(is.na(condition))
#dat_survey %>% group_by(Welle) %>% summarise(n=n())
# sample who participated in intervention
dat_experiment <- dat_raw %>% filter(!is.na(condition))
# dat_experiment %>% group_by(Welle, condition) %>% summarise(n=n())
# Chunk 3
# Variables F91_1_x ... F91_10_x...
# Waves 9, 10, and 11 participated
# Hotels
df_freedom_F91_1 <- dat_raw %>%
select(PNR_fix, lfdn, gender, Welle, starts_with("F91_1_")) %>%
pivot_longer(cols = -c(PNR_fix, lfdn, gender, Welle), names_to = "domain", values_to = "freedom") %>%
drop_na(freedom) %>%  # %>% count(Welle)
mutate(freedom = factor(zap_formats(zap_label(freedom)), levels = c("0", "1"), labels = c("no", "yes"))) %>%
mutate(group = case_when(grepl("_1_1", domain) ~ "negative test",
grepl("_1_2", domain) ~ "vaccinated",
grepl("_1_3", domain) ~ "recovered",
grepl("_1_4", domain) ~ "none")) %>%
mutate(group = factor(group, levels = c("negative test", "vaccinated", "recovered", "none"))) %>%
mutate(domain = "Accomodation")
# Flights
df_freedom_F91_2 <- dat_raw %>%
select(PNR_fix, lfdn, gender, Welle, starts_with("F91_2_")) %>%
pivot_longer(cols = -c(PNR_fix, lfdn, gender, Welle), names_to = "domain", values_to = "freedom") %>%
drop_na(freedom) %>%  # %>% count(Welle)
mutate(freedom = factor(zap_formats(zap_label(freedom)), levels = c("0", "1"), labels = c("no", "yes"))) %>%
mutate(group = case_when(grepl("_2_1", domain) ~ "negative test",
grepl("_2_2", domain) ~ "vaccinated",
grepl("_2_3", domain) ~ "recovered",
grepl("_2_4", domain) ~ "none")) %>%
mutate(group = factor(group, levels = c("negative test", "vaccinated", "recovered", "none"))) %>%
mutate(domain = "Flights")
# Public sport events
df_freedom_F91_3 <- dat_raw %>%
select(PNR_fix, lfdn, gender, Welle, starts_with("F91_3_")) %>%
pivot_longer(cols = -c(PNR_fix, lfdn, gender, Welle), names_to = "domain", values_to = "freedom") %>%
drop_na(freedom) %>%  # %>% count(Welle)
mutate(freedom = factor(zap_formats(zap_label(freedom)), levels = c("0", "1"), labels = c("no", "yes"))) %>%
mutate(group = case_when(grepl("_3_1", domain) ~ "negative test",
grepl("_3_2", domain) ~ "vaccinated",
grepl("_3_3", domain) ~ "recovered",
grepl("_3_4", domain) ~ "none")) %>%
mutate(group = factor(group, levels = c("negative test", "vaccinated", "recovered", "none"))) %>%
mutate(domain = "Sport events")
# Restaurants and bars
df_freedom_F91_4 <- dat_raw %>%
select(PNR_fix, lfdn, gender, Welle, starts_with("F91_4_")) %>%
pivot_longer(cols = -c(PNR_fix, lfdn, gender, Welle), names_to = "domain", values_to = "freedom") %>%
drop_na(freedom) %>%  # %>% count(Welle)
mutate(freedom = factor(zap_formats(zap_label(freedom)), levels = c("0", "1"), labels = c("no", "yes"))) %>%
mutate(group = case_when(grepl("_4_1", domain) ~ "negative test",
grepl("_4_2", domain) ~ "vaccinated",
grepl("_4_3", domain) ~ "recovered",
grepl("_4_4", domain) ~ "none")) %>%
mutate(group = factor(group, levels = c("negative test", "vaccinated", "recovered", "none"))) %>%
mutate(domain = "Restaurants and bars")
# Cultural events
df_freedom_F91_5 <- dat_raw %>%
select(PNR_fix, lfdn, gender, Welle, starts_with("F91_5_")) %>%
pivot_longer(cols = -c(PNR_fix, lfdn, gender, Welle), names_to = "domain", values_to = "freedom") %>%
drop_na(freedom) %>%  # %>% count(Welle)
mutate(freedom = factor(zap_formats(zap_label(freedom)), levels = c("0", "1"), labels = c("no", "yes"))) %>%
mutate(group = case_when(grepl("_5_1", domain) ~ "negative test",
grepl("_5_2", domain) ~ "vaccinated",
grepl("_5_3", domain) ~ "recovered",
grepl("_5_4", domain) ~ "none")) %>%
mutate(group = factor(group, levels = c("negative test", "vaccinated", "recovered", "none"))) %>%
mutate(domain = "Cultural events")
# Public transport
df_freedom_F91_6 <- dat_raw %>%
select(PNR_fix, lfdn, gender, Welle, starts_with("F91_6_")) %>%
pivot_longer(cols = -c(PNR_fix, lfdn, gender, Welle), names_to = "domain", values_to = "freedom")%>%
drop_na(freedom) %>%  # %>% count(Welle)
mutate(freedom = factor(zap_formats(zap_label(freedom)), levels = c("0", "1"), labels = c("no", "yes"))) %>%
mutate(group = case_when(grepl("_6_1", domain) ~ "negative test",
grepl("_6_2", domain) ~ "vaccinated",
grepl("_6_3", domain) ~ "recovered",
grepl("_6_4", domain) ~ "none")) %>%
mutate(group = factor(group, levels = c("negative test", "vaccinated", "recovered", "none"))) %>%
mutate(domain = "Public transport")
# Public office buildings
df_freedom_F91_7 <- dat_raw %>%
select(PNR_fix, lfdn, gender, Welle, starts_with("F91_7_")) %>%
pivot_longer(cols = -c(PNR_fix, lfdn, gender, Welle), names_to = "domain", values_to = "freedom")%>%
drop_na(freedom) %>%  # %>% count(Welle)
mutate(freedom = factor(zap_formats(zap_label(freedom)), levels = c("0", "1"), labels = c("no", "yes"))) %>%
mutate(group = case_when(grepl("_7_1", domain) ~ "negative test",
grepl("_7_2", domain) ~ "vaccinated",
grepl("_7_3", domain) ~ "recovered",
grepl("_7_4", domain) ~ "none")) %>%
mutate(group = factor(group, levels = c("negative test", "vaccinated", "recovered", "none"))) %>%
mutate(domain = "Public office buildings")
# Classroom teaching
df_freedom_F91_8 <- dat_raw %>%
select(PNR_fix, lfdn, gender, Welle, starts_with("F91_8_")) %>%
pivot_longer(cols = -c(PNR_fix, lfdn, gender, Welle), names_to = "domain", values_to = "freedom") %>%
drop_na(freedom) %>%  # %>% count(Welle)
mutate(freedom = factor(zap_formats(zap_label(freedom)), levels = c("0", "1"), labels = c("no", "yes"))) %>%
mutate(group = case_when(grepl("_8_1", domain) ~ "negative test",
grepl("_8_2", domain) ~ "vaccinated",
grepl("_8_3", domain) ~ "recovered",
grepl("_8_4", domain) ~ "none")) %>%
mutate(group = factor(group, levels = c("negative test", "vaccinated", "recovered", "none"))) %>%
mutate(domain = "Classroom teaching")
# Home for the elderly
df_freedom_F91_9 <- dat_raw %>%
select(PNR_fix, lfdn, gender, Welle, starts_with("F91_9_")) %>%
pivot_longer(cols = -c(PNR_fix, lfdn, gender, Welle), names_to = "domain", values_to = "freedom") %>%
drop_na(freedom) %>%  # %>% count(Welle)
mutate(freedom = factor(zap_formats(zap_label(freedom)), levels = c("0", "1"), labels = c("no", "yes"))) %>%
mutate(group = case_when(grepl("_9_1", domain) ~ "negative test",
grepl("_9_2", domain) ~ "vaccinated",
grepl("_9_3", domain) ~ "recovered",
grepl("_9_4", domain) ~ "none")) %>%
mutate(group = factor(group, levels = c("negative test", "vaccinated", "recovered", "none"))) %>%
mutate(domain = "Home for the elderly")
# Close contact services
df_freedom_F91_10 <- dat_raw %>%
select(PNR_fix, lfdn, gender, Welle, starts_with("F91_10_")) %>%
pivot_longer(cols = -c(PNR_fix, lfdn, gender, Welle), names_to = "domain", values_to = "freedom") %>%
drop_na(freedom) %>%  # %>% count(Welle)
mutate(freedom = factor(zap_formats(zap_label(freedom)), levels = c("0", "1"), labels = c("no", "yes"))) %>%
mutate(group = case_when(grepl("_10_1", domain) ~ "negative test",
grepl("_10_2", domain) ~ "vaccinated",
grepl("_10_3", domain) ~ "recovered",
grepl("_10_4", domain) ~ "none")) %>%
mutate(group = factor(group, levels = c("negative test", "vaccinated", "recovered", "none"))) %>%
mutate(domain = "Close contact services")
df_freedom <- rbind(df_freedom_F91_1,
df_freedom_F91_2,
df_freedom_F91_3,
df_freedom_F91_4,
df_freedom_F91_5,
df_freedom_F91_6,
df_freedom_F91_7,
df_freedom_F91_8,
df_freedom_F91_9,
df_freedom_F91_10) %>%
select(PNR_fix, lfdn, gender, Welle, domain, group, freedom)
df_freedom_pooled <- df_freedom %>% group_by(Welle, group) %>% count(freedom) %>% mutate(prop = n/sum(n)) %>% filter(freedom == "yes") %>%
mutate(domain = "Pooled")
df_freedom_prop <- df_freedom %>% group_by(Welle, domain, group) %>% count(freedom) %>% mutate(prop = n/sum(n)) %>% filter(freedom == "yes") %>%
bind_rows(df_freedom_pooled) %>%
mutate(domain = factor(domain, levels = c("Pooled", "Accomodation", "Classroom teaching", "Close contact services",  "Cultural events" , "Flights",  "Home for the elderly", "Public office buildings", "Public transport", "Restaurants and bars", "Sport events")))
# Chunk 4
ggplot(df_freedom_prop, aes(x=domain, y=prop, fill = Welle, alpha = domain)) +
facet_grid(Welle~group) +
geom_bar(stat = "identity", colour = "black") +
scale_alpha_manual(values=c(1, rep(.3, 10))) +
scale_y_continuous('Proportion affirmation', limits = c(0,1),  expand = c(0,0), labels = scales::percent_format(1L)) +
ggtitle('Who should be allowed to participate in what activities?') +
scale_fill_brewer(palette="Dark2") +
theme(axis.text.x = element_text(angle = 70, hjust = 1, colour = "black"))
# Chunk 5
# pooled only
ggplot(filter(df_freedom_prop, domain == "Pooled"), aes(x=group, y=prop, fill = Welle, label = scales::percent(prop))) +
facet_wrap(~Welle) +
geom_bar(stat = "identity", colour = "black") +
scale_y_continuous('Proportion affirmation', limits = c(0,1),  expand = c(0,0), labels = scales::percent_format(1L)) +
ggtitle('Who should be allowed to participate in what activities?\n(pooled across 10 domains)') +
scale_fill_brewer(palette="Dark2") +
geom_text(position = position_dodge(width = .9),  vjust = -0.5, size = 3) +
theme(axis.text.x = element_text(angle = 70, hjust = 1, colour = "black"))
# Chunk 6
# compute proportion of freedom granting for each subject, pooled across 10 domains
df_freedom_pooled_by_subject <-df_freedom %>%
group_by(Welle, PNR_fix, group, freedom) %>%
summarise(n= n()) %>% complete(freedom, fill = list(n = 0)) %>%
mutate(prop = n / sum(n)) %>%
filter(freedom == "yes") %>%
mutate(domain = "Pooled")
# compute proportion of freedom granting for each subject, pooled across 8 domains (excluding public transport and access to public office buildings)
df_freedom_pooled_8domains_by_subject <-df_freedom %>%
filter(domain != "Public transport" | domain != "Public office buildings") %>%
group_by(Welle, PNR_fix, group, freedom) %>%
summarise(n= n()) %>% complete(freedom, fill = list(n = 0)) %>%
mutate(prop = n / sum(n)) %>%
filter(freedom == "yes") %>%
mutate(domain = "Pooled")
df_regression_freedom <- dat_raw %>%
select(PNR_fix, lfdn, Welle, education, gender, age, F89_schnelltest_wissen, F90a, F90b, F95_1, F95_2, F95_3, F95_4, F95_5, F96, F96w) %>%
rename(F90a_risk_infection_pos_test = F90a, F90b_risk_infection_neg_test = F90b) %>% # risk of infection given positive or negative test result
rename(F95_1_risk_vaccinated = F95_1, F95_2_risk_recovered = F95_2, F95_3_risk_positive_test  = F95_3, F95_4_risk_negative_test = F95_4, F95_5risk_none = F95_5) %>%
left_join(df_freedom_pooled_by_subject) %>%
filter(!is.na(F89_schnelltest_wissen)) %>%
# map predictors in range 0-100 to range 0-1 (same range as response variable, which is a proportion)
mutate(F90a_risk_infection_pos_test = F90a_risk_infection_pos_test/100,
F90b_risk_infection_neg_test = F90b_risk_infection_neg_test/100,
F95_1_risk_vaccinated = F95_1_risk_vaccinated/100,
F95_2_risk_recovered = F95_2_risk_recovered/100,
F95_3_risk_positive_test = F95_3_risk_positive_test/100,
F95_4_risk_negative_test = F95_4_risk_negative_test/100,
F95_5risk_none = F95_5risk_none/100)
# df for regressions for wave 9
df_regression_freedom_wave9 <- df_regression_freedom %>% filter(Welle == "Welle 9\n(11.02.- 17.03.2021)")
# df for regressions for wave 10
df_regression_freedom_wave10 <- df_regression_freedom %>% filter(Welle == "Welle 10\n(18.03.- 21.04.2021)")
# Chunk 7
# regression  model for wave 10: group = proportion of freedoms granted to people with negative negative test result
m_wave9_negTest_ols <- glm(prop ~ gender + education + age + F90a_risk_infection_pos_test + F90b_risk_infection_neg_test  + F89_schnelltest_wissen, data = filter(df_regression_freedom_wave9, group == "negative test"))
m_wave9_vaccinated_ols <- glm(prop ~ gender + education + age + F90a_risk_infection_pos_test + F90b_risk_infection_neg_test + F89_schnelltest_wissen, data = filter(df_regression_freedom_wave9, group == "vaccinated"))
m_wave9_recovered_ols <- glm(prop ~ gender + education + age + F90a_risk_infection_pos_test + F90b_risk_infection_neg_test+ F89_schnelltest_wissen, data = filter(df_regression_freedom_wave9, group == "recovered"))
m_wave9_none_ols <- glm(prop ~ gender + education + age + F90a_risk_infection_pos_test + F90b_risk_infection_neg_test + F89_schnelltest_wissen, data = filter(df_regression_freedom_wave9, group == "none"))
# summary(m)
tab_model(m_wave9_negTest_ols, m_wave9_vaccinated_ols, m_wave9_recovered_ols, m_wave9_none_ols, digits = 3, dv.labels = c("negative test", "vaccinated", "recovered", "none"), title = "Welle 9, OLS regression: Proportion of domains/activities (out of 10, computed for each subject) in which different groups should be allowed to participate.")
# Chunk 8
# plot coefficients
plot_grid(list(plot_model(m_wave9_negTest_ols, type = "est", title = "Negative test", show.values = TRUE, value.offset = .3), plot_model(m_wave9_vaccinated_ols, type = "est", title = "Vaccinated", show.values = TRUE, value.offset = .3), plot_model(m_wave9_recovered_ols, type = "est", title = "Recovered", show.values = TRUE, value.offset = .3), plot_model(m_wave9_none_ols, type = "est", title = "None", show.values = TRUE, value.offset = .3)))
# Chunk 9
# regression  model for wave 10: group = proportion of freedoms granted to people with negative negative test result
m_wave9_negTest_ols <- glm(prop ~ gender + education + age + F90a_risk_infection_pos_test + F90b_risk_infection_neg_test  + F89_schnelltest_wissen, data = filter(df_regression_freedom_wave9, group == "negative test"))
m_wave9_vaccinated_ols <- glm(prop ~ gender + education + age + F90a_risk_infection_pos_test + F90b_risk_infection_neg_test + F89_schnelltest_wissen, data = filter(df_regression_freedom_wave9, group == "vaccinated"))
m_wave9_recovered_ols <- glm(prop ~ gender + education + age + F90a_risk_infection_pos_test + F90b_risk_infection_neg_test+ F89_schnelltest_wissen, data = filter(df_regression_freedom_wave9, group == "recovered"))
m_wave9_none_ols <- glm(prop ~ gender + education + age + F90a_risk_infection_pos_test + F90b_risk_infection_neg_test + F89_schnelltest_wissen, data = filter(df_regression_freedom_wave9, group == "none"))
# summary(m)
tab_model(m_wave9_negTest_ols, m_wave9_vaccinated_ols, m_wave9_recovered_ols, m_wave9_none_ols, digits = 3, dv.labels = c("negative test", "vaccinated", "recovered", "none"), title = "Welle 9, OLS regression: Proportion of domains/activities (out of 10, computed for each subject) in which different groups should be allowed to participate.")
# Chunk 10
df_regression_freedom_wave9 <-  df_regression_freedom_wave9 %>%
mutate(prop_betareg = (prop * (3725 - 1) + 0.5)/3725)
# regression  model for wave 10: group = proportion of freedoms granted to people with negative negative test result
m_wave9_negTest_betareg <- glm(prop_betareg ~ gender + education + age + F90a_risk_infection_pos_test + F90b_risk_infection_neg_test  + F89_schnelltest_wissen, data = filter(df_regression_freedom_wave9, group == "negative test"))
m_wave9_vaccinated_betareg <- glm(prop_betareg ~ gender + education + age + F90a_risk_infection_pos_test + F90b_risk_infection_neg_test + F89_schnelltest_wissen, data = filter(df_regression_freedom_wave9, group == "vaccinated"))
m_wave9_recovered_betareg <- glm(prop_betareg ~ gender + education + age + F90a_risk_infection_pos_test + F90b_risk_infection_neg_test+ F89_schnelltest_wissen, data = filter(df_regression_freedom_wave9, group == "recovered"))
m_wave9_none_betareg <- glm(prop_betareg ~ gender + education + age + F90a_risk_infection_pos_test + F90b_risk_infection_neg_test + F89_schnelltest_wissen, data = filter(df_regression_freedom_wave9, group == "none"))
# summary(m)
tab_model(m_wave9_negTest_betareg, m_wave9_vaccinated_betareg, m_wave9_recovered_betareg, m_wave9_none_betareg,  digits = 3, dv.labels = c("negative test", "vaccinated", "recovered", "none"), title = "Welle 9, beta regression: Proportion of domains/activities (out of 10, computed for each subject) in which different groups should be allowed to participate.")
# Chunk 11
# plot coefficients
plot_grid(list(plot_model(m_wave9_negTest_betareg, type = "est", title = "Negative test", show.values = TRUE, value.offset = .3), plot_model(m_wave9_vaccinated_betareg, type = "est", title = "Vaccinated", show.values = TRUE, value.offset = .3), plot_model(m_wave9_recovered_betareg, type = "est", title = "Recovered", show.values = TRUE, value.offset = .3), plot_model(m_wave9_none_betareg, type = "est", title = "None", show.values = TRUE, value.offset = .3)))
# Chunk 12
# regression  model for wave 10: group = proportion of freedoms granted to people with negative negative test result
m_wave10_negTest_ols <- glm(prop ~ gender + education + age + F95_4_risk_negative_test + F96 + F89_schnelltest_wissen, data = filter(df_regression_freedom_wave10, group == "negative test"))
m_wave10_vaccinated_ols <- glm(prop ~ gender + education + age + F95_1_risk_vaccinated + F96 + F89_schnelltest_wissen, data = filter(df_regression_freedom_wave10, group == "vaccinated"))
m_wave10_recovered_ols <- glm(prop ~ gender + education + age + F95_2_risk_recovered + F96 + F89_schnelltest_wissen, data = filter(df_regression_freedom_wave10, group == "recovered"))
m_wave10_none_ols <- glm(prop ~ gender + education + age + F95_5risk_none + F96 + F89_schnelltest_wissen, data = filter(df_regression_freedom_wave10, group == "none"))
# summary(m)
tab_model(m_wave10_negTest_ols, m_wave10_vaccinated_ols, m_wave10_recovered_ols, m_wave10_none_ols,  digits = 3, dv.labels = c("negative test", "vaccinated", "recovered", "none"), title = "Welle 10, OLS regression: Proportion of domains/activities (out of 10, computed for each subject) in which different groups should be allowed to participate.")
#
#
# plot_residuals(
#   m_wave10_none_ols,
#   geom.size = 2,
#   remove.estimates = NULL,
#   show.lines = F,
#   show.resid = F,
#   show.pred = TRUE,
#   show.ci = FALSE
# )
# Housekeeping
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(fig.align='center')
options(knitr.kable.NA = '')
# required R packages
packages <- c('gridExtra', 'tidyverse', "RColorBrewer", "Hmisc", "haven", "rstatix", "ggpubr", "kableExtra", "lubridate", "scales", "lme4", "sjPlot", "sjmisc", "sjlabelled", "afex", "car", "betareg", "effects", "ggeffects", "ggExtra", "viridis")
lapply(packages, require, character.only = TRUE)
set.seed(0815)
# set ggplot theme
theme_set(theme_classic() +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "none",
text = element_text(colour = "black"),
axis.text.x = element_text(colour = "black"),
axis.text.y = element_text(colour="black"),
strip.background =element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()))
dat_raw <- read_sav("data/2021_07_02_COMPASS_W0-W12_linewise_essential.sav") %>%
filter(Welle > 8 & Welle < 12) %>%  # remove irrelevant data collection waves
select_if(function(x) !all(is.na(x)))  # remove variables containing only NA
# which variables contain *only* NA?
# na_cols <- dat_raw %>% select_if(function(x) all(is.na(x))) %>% colnames()
# dat_raw  <- dat_raw %>% select(!all_of(na_cols))
# convert variables to factors
dat_raw$lfdn <- haven::as_factor(dat_raw$lfdn)
dat_raw$Welle <- haven::as_factor(dat_raw$Welle)
dat_raw$Schnelltestmodul <- haven::as_factor(dat_raw$Schnelltestmodul)
# condition
dat_raw <- dat_raw %>% mutate(condition = Schnelltestmodul)
# relevel data collection waves and change labels for plotting
dat_raw$Welle <- droplevels(dat_raw$Welle)
dat_raw$Welle <- dplyr::recode(dat_raw$Welle,
"Welle 9 (11.02.2021 bis 17.03.2021)" = "Welle 9\n(11.02.- 17.03.2021)",
"Welle 10 (18.03.2021 bis 21.04.2021)" = "Welle 10\n(18.03.- 21.04.2021)",
"Welle 11 (22.04.2021 bis 26.05.2021)" = "Welle 11\n(22.04.-26.05.2021)")
# S1_Age
dat_raw     <- dat_raw %>% rename(age = S1_Alter)
# S2: Gender
dat_raw$gender <- haven::as_factor(dat_raw$S2)
dat_raw$gender <- dplyr::recode(dat_raw$gender,
"MÃ¤nnlich" = "male",
"Weiblich" = "female",
"divers" = "non-binary")
#set reference level
dat_raw$gender <- relevel(dat_raw$gender, ref = "male")
# Education
dat_raw$education <- haven::as_factor(dat_raw$S5)
levels(dat_raw$education) <- c("Noch in Schulausbildung", "Von der Schule abgegangen ohne Schulabschluss", "Haupt- oder Volksschul-Abschluss", "Mittlere Reife oder Abschluss der polytechnischen Oberschule POS","Abitur, Fachhochschulreife (Gymnasien oder erweiterte Oberschule EOS)")
#set reference level
dat_raw$education <- relevel(dat_raw$education, ref = "Noch in Schulausbildung")
# Schnelltestwissen: recode as correct vs incorrect (see below for more fine-grained analyses)
# answer options (multiple answers allowed): F89_1, F89_2, F89_3, F89_4, F89_5, F89_99
# glimpse(dat_raw$F89_1)
# correct = *only" F89_1 has been selected, otherwise false
dat_raw <- dat_raw %>%
mutate(F89_schnelltest_wissen = factor(if_else(F89_1 == 1 & (F89_2 == 0 & F89_3 == 0 & F89_4 == 0 & F89_5 == 0 & F89_99 == 0), "correct", "false")))
#set reference level
dat_raw$F89_schnelltest_wissen <- relevel(dat_raw$F89_schnelltest_wissen, ref = "correct")
# Rename variables --------------------------------------------------------
# risk perception
dat_raw <- dat_raw %>% rename(risk_perception_pre = F3)
dat_raw <- dat_raw %>% rename(risk_perception_post = F3w)
dat_raw$risk_perception_diff <-  dat_raw$risk_perception_pre - dat_raw$risk_perception_post # pre-post difference in risk perception
# intention to test: pre and post
dat_raw <- dat_raw %>% rename(intention_rapidtest_home_pre = F891_1)
dat_raw <- dat_raw %>% rename(intention_rapidtest_pointofcare_pre = F891_2)
dat_raw <- dat_raw %>% rename(intention_PCR_pre = F891_3)
dat_raw <- dat_raw %>% rename(intention_rapidtest_home_post = F891w_1)
dat_raw <- dat_raw %>% rename(intention_rapidtest_pointofcare_post = F891w_2)
dat_raw <- dat_raw %>% rename(intention_PCR_post = F891w_3)
# split sample: survey data and experimental data -------------------------
# sample who did not participate in intervention
dat_survey <- dat_raw %>% filter(is.na(condition))
#dat_survey %>% group_by(Welle) %>% summarise(n=n())
# sample who participated in intervention
dat_experiment <- dat_raw %>% filter(!is.na(condition))
# dat_experiment %>% group_by(Welle, condition) %>% summarise(n=n())
# Housekeeping
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(fig.align='center')
options(knitr.kable.NA = '')
# required R packages
packages <- c('gridExtra', 'tidyverse', "RColorBrewer", "Hmisc", "haven", "rstatix", "ggpubr", "kableExtra", "lubridate", "scales", "lme4", "sjPlot", "sjmisc", "sjlabelled", "afex", "car", "betareg", "effects", "ggeffects", "ggExtra", "viridis")
lapply(packages, require, character.only = TRUE)
set.seed(0815)
# set ggplot theme
theme_set(theme_classic() +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "none",
text = element_text(colour = "black"),
axis.text.x = element_text(colour = "black"),
axis.text.y = element_text(colour="black"),
strip.background =element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()))
dat_raw <- read_sav("data/2021_07_02_COMPASS_W0-W12_linewise_essential.sav") %>%
filter(Welle > 8 & Welle < 12) %>%  # remove irrelevant data collection waves
select_if(function(x) !all(is.na(x)))  # remove variables containing only NA
# which variables contain *only* NA?
# na_cols <- dat_raw %>% select_if(function(x) all(is.na(x))) %>% colnames()
# dat_raw  <- dat_raw %>% select(!all_of(na_cols))
# convert variables to factors
dat_raw$lfdn <- haven::as_factor(dat_raw$lfdn)
dat_raw$Welle <- haven::as_factor(dat_raw$Welle)
dat_raw$Schnelltestmodul <- haven::as_factor(dat_raw$Schnelltestmodul)
# condition
dat_raw <- dat_raw %>% mutate(condition = Schnelltestmodul)
# relevel data collection waves and change labels for plotting
dat_raw$Welle <- droplevels(dat_raw$Welle)
dat_raw$Welle <- dplyr::recode(dat_raw$Welle,
"Welle 9 (11.02.2021 bis 17.03.2021)" = "Welle 9\n(11.02.- 17.03.2021)",
"Welle 10 (18.03.2021 bis 21.04.2021)" = "Welle 10\n(18.03.- 21.04.2021)",
"Welle 11 (22.04.2021 bis 26.05.2021)" = "Welle 11\n(22.04.-26.05.2021)")
# S1_Age
dat_raw     <- dat_raw %>% rename(age = S1_Alter)
# S2: Gender
dat_raw$gender <- haven::as_factor(dat_raw$S2)
dat_raw$gender <- dplyr::recode(dat_raw$gender,
"MÃ¤nnlich" = "male",
"Weiblich" = "female",
"divers" = "non-binary")
#set reference level
dat_raw$gender <- relevel(dat_raw$gender, ref = "male")
# Education
dat_raw$education <- haven::as_factor(dat_raw$S5)
levels(dat_raw$education) <- c("Noch in Schulausbildung", "Von der Schule abgegangen ohne Schulabschluss", "Haupt- oder Volksschul-Abschluss", "Mittlere Reife oder Abschluss der polytechnischen Oberschule POS","Abitur, Fachhochschulreife (Gymnasien oder erweiterte Oberschule EOS)")
#set reference level
dat_raw$education <- relevel(dat_raw$education, ref = "Noch in Schulausbildung")
# Schnelltestwissen: recode as correct vs incorrect (see below for more fine-grained analyses)
# answer options (multiple answers allowed): F89_1, F89_2, F89_3, F89_4, F89_5, F89_99
# glimpse(dat_raw$F89_1)
# correct = *only" F89_1 has been selected, otherwise false
dat_raw <- dat_raw %>%
mutate(F89_schnelltest_wissen = factor(if_else(F89_1 == 1 & (F89_2 == 0 & F89_3 == 0 & F89_4 == 0 & F89_5 == 0 & F89_99 == 0), "correct", "false")))
#set reference level
dat_raw$F89_schnelltest_wissen <- relevel(dat_raw$F89_schnelltest_wissen, ref = "correct")
# Rename variables --------------------------------------------------------
# risk perception
dat_raw <- dat_raw %>% rename(risk_perception_pre = F3)
dat_raw <- dat_raw %>% rename(risk_perception_post = F3w)
dat_raw$risk_perception_diff <-  dat_raw$risk_perception_pre - dat_raw$risk_perception_post # pre-post difference in risk perception
# intention to test: pre and post
dat_raw <- dat_raw %>% rename(intention_rapidtest_home_pre = F891_1)
dat_raw <- dat_raw %>% rename(intention_rapidtest_pointofcare_pre = F891_2)
dat_raw <- dat_raw %>% rename(intention_PCR_pre = F891_3)
dat_raw <- dat_raw %>% rename(intention_rapidtest_home_post = F891w_1)
dat_raw <- dat_raw %>% rename(intention_rapidtest_pointofcare_post = F891w_2)
dat_raw <- dat_raw %>% rename(intention_PCR_post = F891w_3)
# split sample: survey data and experimental data -------------------------
# sample who did not participate in intervention
dat_survey <- dat_raw %>% filter(is.na(condition))
#dat_survey %>% group_by(Welle) %>% summarise(n=n())
# sample who participated in intervention
dat_experiment <- dat_raw %>% filter(!is.na(condition))
# dat_experiment %>% group_by(Welle, condition) %>% summarise(n=n())
dat_raw <- read_sav("data/2021_07_02_COMPASS_W0-W12_linewise_essential.sav") %>%
filter(Welle > 8 & Welle < 12) %>%  # remove irrelevant data collection waves
select_if(function(x) !all(is.na(x)))  # remove variables containing only NA
